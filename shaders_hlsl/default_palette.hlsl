struct VSInput {
  float3 position : POSITION;
  float  nidx : COLOR;
  float  attr1: COLOR1;
  float  ao   : COLOR2;
};

struct VSOutput {
  float4 position : SV_POSITION;
  float3 color : COLOR;
  float3 normal : NORMAL;
  float4 frag_pos_lightspace : POSITION1;
  float4 frag_pos_worldspace : POSITION2;
};

struct PSOutput {
  float4 color    : SV_Target0;
  float4 worldpos : SV_Target1;
};

cbuffer CBPerObject : register(b0) {
  float4x4 M;
  float4x4 V;
  float4x4 P;
};

cbuffer CBPerScene : register(b1) {
  float3 dir_light;
  float4x4 lightPV;
  float4 cam_pos;
}

Texture2D shadow_map : register(t0);
SamplerState shadow_map_sampler;

// To hard-code, declare this variable as static const
// TODO: Why is this BGR after copying and pasting
static const float3 default_palette[256] = {
    {0.000,0.000,0.000}, {1.000,1.000,1.000}, {1.000,1.000,0.800}, {1.000,1.000,0.600}, {1.000,1.000,0.400}, {1.000,1.000,0.200}, {1.000,1.000,0.000}, {1.000,0.800,1.000}, 
    {1.000,0.800,0.800}, {1.000,0.800,0.600}, {1.000,0.800,0.400}, {1.000,0.800,0.200}, {1.000,0.800,0.000}, {1.000,0.600,1.000}, {1.000,0.600,0.800}, {1.000,0.600,0.600}, 
    {1.000,0.600,0.400}, {1.000,0.600,0.200}, {1.000,0.600,0.000}, {1.000,0.400,1.000}, {1.000,0.400,0.800}, {1.000,0.400,0.600}, {1.000,0.400,0.400}, {1.000,0.400,0.200}, 
    {1.000,0.400,0.000}, {1.000,0.200,1.000}, {1.000,0.200,0.800}, {1.000,0.200,0.600}, {1.000,0.200,0.400}, {1.000,0.200,0.200}, {1.000,0.200,0.000}, {1.000,0.000,1.000}, 
    {1.000,0.000,0.800}, {1.000,0.000,0.600}, {1.000,0.000,0.400}, {1.000,0.000,0.200}, {1.000,0.000,0.000}, {0.800,1.000,1.000}, {0.800,1.000,0.800}, {0.800,1.000,0.600}, 
    {0.800,1.000,0.400}, {0.800,1.000,0.200}, {0.800,1.000,0.000}, {0.800,0.800,1.000}, {0.800,0.800,0.800}, {0.800,0.800,0.600}, {0.800,0.800,0.400}, {0.800,0.800,0.200}, 
    {0.800,0.800,0.000}, {0.800,0.600,1.000}, {0.800,0.600,0.800}, {0.800,0.600,0.600}, {0.800,0.600,0.400}, {0.800,0.600,0.200}, {0.800,0.600,0.000}, {0.800,0.400,1.000}, 
    {0.800,0.400,0.800}, {0.800,0.400,0.600}, {0.800,0.400,0.400}, {0.800,0.400,0.200}, {0.800,0.400,0.000}, {0.800,0.200,1.000}, {0.800,0.200,0.800}, {0.800,0.200,0.600}, 
    {0.800,0.200,0.400}, {0.800,0.200,0.200}, {0.800,0.200,0.000}, {0.800,0.000,1.000}, {0.800,0.000,0.800}, {0.800,0.000,0.600}, {0.800,0.000,0.400}, {0.800,0.000,0.200}, 
    {0.800,0.000,0.000}, {0.600,1.000,1.000}, {0.600,1.000,0.800}, {0.600,1.000,0.600}, {0.600,1.000,0.400}, {0.600,1.000,0.200}, {0.600,1.000,0.000}, {0.600,0.800,1.000}, 
    {0.600,0.800,0.800}, {0.600,0.800,0.600}, {0.600,0.800,0.400}, {0.600,0.800,0.200}, {0.600,0.800,0.000}, {0.600,0.600,1.000}, {0.600,0.600,0.800}, {0.600,0.600,0.600}, 
    {0.600,0.600,0.400}, {0.600,0.600,0.200}, {0.600,0.600,0.000}, {0.600,0.400,1.000}, {0.600,0.400,0.800}, {0.600,0.400,0.600}, {0.600,0.400,0.400}, {0.600,0.400,0.200}, 
    {0.600,0.400,0.000}, {0.600,0.200,1.000}, {0.600,0.200,0.800}, {0.600,0.200,0.600}, {0.600,0.200,0.400}, {0.600,0.200,0.200}, {0.600,0.200,0.000}, {0.600,0.000,1.000}, 
    {0.600,0.000,0.800}, {0.600,0.000,0.600}, {0.600,0.000,0.400}, {0.600,0.000,0.200}, {0.600,0.000,0.000}, {0.400,1.000,1.000}, {0.400,1.000,0.800}, {0.400,1.000,0.600}, 
    {0.400,1.000,0.400}, {0.400,1.000,0.200}, {0.400,1.000,0.000}, {0.400,0.800,1.000}, {0.400,0.800,0.800}, {0.400,0.800,0.600}, {0.400,0.800,0.400}, {0.400,0.800,0.200}, 
    {0.400,0.800,0.000}, {0.400,0.600,1.000}, {0.400,0.600,0.800}, {0.400,0.600,0.600}, {0.400,0.600,0.400}, {0.400,0.600,0.200}, {0.400,0.600,0.000}, {0.400,0.400,1.000}, 
    {0.400,0.400,0.800}, {0.400,0.400,0.600}, {0.400,0.400,0.400}, {0.400,0.400,0.200}, {0.400,0.400,0.000}, {0.400,0.200,1.000}, {0.400,0.200,0.800}, {0.400,0.200,0.600}, 
    {0.400,0.200,0.400}, {0.400,0.200,0.200}, {0.400,0.200,0.000}, {0.400,0.000,1.000}, {0.400,0.000,0.800}, {0.400,0.000,0.600}, {0.400,0.000,0.400}, {0.400,0.000,0.200}, 
    {0.400,0.000,0.000}, {0.200,1.000,1.000}, {0.200,1.000,0.800}, {0.200,1.000,0.600}, {0.200,1.000,0.400}, {0.200,1.000,0.200}, {0.200,1.000,0.000}, {0.200,0.800,1.000}, 
    {0.200,0.800,0.800}, {0.200,0.800,0.600}, {0.200,0.800,0.400}, {0.200,0.800,0.200}, {0.200,0.800,0.000}, {0.200,0.600,1.000}, {0.200,0.600,0.800}, {0.200,0.600,0.600}, 
    {0.200,0.600,0.400}, {0.200,0.600,0.200}, {0.200,0.600,0.000}, {0.200,0.400,1.000}, {0.200,0.400,0.800}, {0.200,0.400,0.600}, {0.200,0.400,0.400}, {0.200,0.400,0.200}, 
    {0.200,0.400,0.000}, {0.200,0.200,1.000}, {0.200,0.200,0.800}, {0.200,0.200,0.600}, {0.200,0.200,0.400}, {0.200,0.200,0.200}, {0.200,0.200,0.000}, {0.200,0.000,1.000}, 
    {0.200,0.000,0.800}, {0.200,0.000,0.600}, {0.200,0.000,0.400}, {0.200,0.000,0.200}, {0.200,0.000,0.000}, {0.000,1.000,1.000}, {0.000,1.000,0.800}, {0.000,1.000,0.600}, 
    {0.000,1.000,0.400}, {0.000,1.000,0.200}, {0.000,1.000,0.000}, {0.000,0.800,1.000}, {0.000,0.800,0.800}, {0.000,0.800,0.600}, {0.000,0.800,0.400}, {0.000,0.800,0.200}, 
    {0.000,0.800,0.000}, {0.000,0.600,1.000}, {0.000,0.600,0.800}, {0.000,0.600,0.600}, {0.000,0.600,0.400}, {0.000,0.600,0.200}, {0.000,0.600,0.000}, {0.000,0.400,1.000}, 
    {0.000,0.400,0.800}, {0.000,0.400,0.600}, {0.000,0.400,0.400}, {0.000,0.400,0.200}, {0.000,0.400,0.000}, {0.000,0.200,1.000}, {0.000,0.200,0.800}, {0.000,0.200,0.600}, 
    {0.000,0.200,0.400}, {0.000,0.200,0.200}, {0.000,0.200,0.000}, {0.000,0.000,1.000}, {0.000,0.000,0.800}, {0.000,0.000,0.600}, {0.000,0.000,0.400}, {0.000,0.000,0.200}, 
    {0.933,0.000,0.000}, {0.867,0.000,0.000}, {0.733,0.000,0.000}, {0.667,0.000,0.000}, {0.533,0.000,0.000}, {0.467,0.000,0.000}, {0.333,0.000,0.000}, {0.267,0.000,0.000}, 
    {0.133,0.000,0.000}, {0.067,0.000,0.000}, {0.000,0.933,0.000}, {0.000,0.867,0.000}, {0.000,0.733,0.000}, {0.000,0.667,0.000}, {0.000,0.533,0.000}, {0.000,0.467,0.000}, 
    {0.000,0.333,0.000}, {0.000,0.267,0.000}, {0.000,0.133,0.000}, {0.000,0.067,0.000}, {0.000,0.000,0.933}, {0.000,0.000,0.867}, {0.000,0.000,0.733}, {0.000,0.000,0.667}, 
    {0.000,0.000,0.533}, {0.000,0.000,0.467}, {0.000,0.000,0.333}, {0.000,0.000,0.267}, {0.000,0.000,0.133}, {0.000,0.000,0.067}, {0.933,0.933,0.933}, {0.867,0.867,0.867}, 
    {0.733,0.733,0.733}, {0.667,0.667,0.667}, {0.533,0.533,0.533}, {0.467,0.467,0.467}, {0.333,0.333,0.333}, {0.267,0.267,0.267}, {0.133,0.133,0.133}, {0.067,0.067,0.067}
};

static const float3 default_normals[6] = {
  { 0,0,-1}, { 0,0,1 },
  { 1,0,0 }, {-1,0,0 },
  { 0,1,0 }, {0,-1,0 }
};

VSOutput VSMain(VSInput input) {
  VSOutput output;
  float occ = 1.0f - input.ao * 0.2f;
  output.normal = default_normals[int(input.nidx)];
  output.position = mul(P,  mul(V, mul(M, float4(input.position, 1.0f))));
  output.color = default_palette[(int)(input.attr1)] * occ;
  float4 frag = mul(M, float4(input.position, 1.0f));
  output.frag_pos_lightspace = mul(lightPV, frag);
  output.frag_pos_worldspace = mul(M, float4(input.position, 1.0f));
  return output;
}

PSOutput PSMainWithoutShadow(VSOutput input) {
  PSOutput output;
  output.color = float4(input.color, 1.0f);
  output.worldpos = input.frag_pos_worldspace;
  return output;
}

float ShadowCalc(float4 frag) {
  float3 xyz = frag.xyz / frag.w;
  xyz.xyz = xyz.xyz * 0.5 + 0.5;
  xyz.y = 1.0f - xyz.y; // MEGA HACK
  int width, height, levels;
  shadow_map.GetDimensions(0, width, height, levels);
  
  if (xyz.x < 0 || xyz.x > 1 || xyz.y < 0 || xyz.y > 1)
    return 0.0;
  
  int num_in_shadow = 0, num_samples = 0;
  
  float curr_depth = 0, temp = 0;
  
  for (int dy=-1; dy<=1; dy++) {
    for (int dx=-1; dx<=1; dx++) {
      float closest_depth = shadow_map.Sample(shadow_map_sampler,
        xyz.xy + float2(dx, dy)*1.5 / float2(width, height)).r;
      curr_depth = xyz.z;
      temp = closest_depth;
      
      const float bias = 0.01f;
      num_in_shadow += curr_depth - bias > closest_depth ? 1 : 0;
      num_samples += 1;
    }
  }
  
  return 1.0f * num_in_shadow / num_samples;
}

float Dbg(float4 frag) {
  float3 xyz = frag.xyz / frag.w;
  xyz = xyz * 0.5 + 0.5;
  xyz.y = 1.0f - xyz.y; // MEGA HACK
  float closest_depth = shadow_map.Sample(shadow_map_sampler, xyz.xy).r;
  return closest_depth;
}

float3 Dbg2(float4 frag) {
  float3 xyz = frag.xyz / frag.w;
  xyz = xyz * 0.5 + 0.5;
  return xyz;
}

float IsInShadow(float4 worldpos) {
  float4 frag = mul(lightPV, worldpos);
  float3 xyz = frag.xyz / frag.w;
  xyz.xyz = xyz.xyz * 0.5 + 0.5;
  xyz.y = 1.0f - xyz.y; // MEGA HACK
  int width, height, levels;
  shadow_map.GetDimensions(0, width, height, levels);
  
  float closest_depth = shadow_map.Sample(shadow_map_sampler, xyz.xy).r;
  float curr_depth = xyz.z;
  
  const float bias = 0.001f;
  if (curr_depth - bias > closest_depth) return 1.0f;
  else return 0.0f;
}

PSOutput PSMainWithShadow(VSOutput input) {
  PSOutput output;
  
  float shadow = ShadowCalc(input.frag_pos_lightspace);
  //float shadow = 1.0f * IsInShadow(input.frag_pos_worldspace);
  float strength = dot(-dir_light, input.normal);
  strength = strength * 0.2f + 0.8f - 0.2f * shadow;
  output.color = float4(input.color * strength, 1.0f);
  output.worldpos = input.frag_pos_worldspace;
  return output;
}
